const T = {
  // Contour detection params
  MIN_CONTOUR_AREA: 1e3,
  MIN_CONTOUR_POINTS: 10
}, _ = 0, $ = 1, K = 2, x = [
  { dx: 0, dy: -1 },
  // 0: Top
  { dx: 1, dy: -1 },
  // 1: Top-right
  { dx: 1, dy: 0 },
  // 2: Right
  { dx: 1, dy: 1 },
  // 3: Bottom-right
  { dx: 0, dy: 1 },
  // 4: Bottom
  { dx: -1, dy: 1 },
  // 5: Bottom-left
  { dx: -1, dy: 0 },
  // 6: Left
  { dx: -1, dy: -1 }
  // 7: Top-left
];
function AA(I, A = {}) {
  const g = A.width || Math.sqrt(I.length), C = A.height || I.length / g, Q = A.mode !== void 0 ? A.mode : $, B = A.method !== void 0 ? A.method : K, E = A.minArea || T.MIN_CONTOUR_AREA, i = g + 2, o = C + 2, t = new Int32Array(i * o);
  for (let a = 0; a < C; a++)
    for (let c = 0; c < g; c++)
      I[a * g + c] > 0 && (t[(a + 1) * i + (c + 1)] = 1);
  const e = [];
  let n = 2;
  for (let a = 1; a <= C; a++)
    for (let c = 1; c <= g; c++) {
      const D = t[a * i + c], r = t[a * i + (c - 1)];
      let h = null, y = !1, w = -1;
      if (D === 1 && r === 0 ? (y = !0, h = { x: c, y: a }, w = 2) : D === 0 && r >= 1 && r !== -1 && r === 1 && (y = !1, h = { x: c - 1, y: a }, w = 6), h) {
        if (Q === _ && !y) {
          t[h.y * i + h.x] = -1;
          continue;
        }
        const l = n++, G = IA(t, i, o, h, w, l);
        if (G && G.length > 0) {
          let d = G;
          B === K && (d = gA(G));
          const k = d.map((R) => ({ x: R.x - 1, y: R.y - 1 }));
          if (k.length >= (B === K ? 4 : T.MIN_CONTOUR_POINTS)) {
            const R = {
              id: l,
              points: k,
              isOuter: y
              // Calculate area and bounding box later if needed for filtering/sorting
            };
            e.push(R);
          }
        } else
          t[h.y * i + h.x] === 1 && (t[h.y * i + h.x] = l);
      }
    }
  e.forEach((a) => {
    a.area = BA(a.points), a.boundingBox = QA(a.points);
  });
  const s = e.filter((a) => a.area >= E);
  return s.sort((a, c) => c.area - a.area), A.debug && (A.debug.labels = t, A.debug.rawContours = e, A.debug.finalContours = s), s;
}
function IA(I, A, g, C, Q, B) {
  const E = [], i = /* @__PURE__ */ new Set();
  let o = { ...C }, t = -1;
  I[C.y * A + C.x] = B;
  let e = 0;
  const n = A * g;
  for (; e++ < n; ) {
    let s;
    if (t === -1) {
      let D = !1;
      for (let r = 0; r < 8; r++) {
        s = (Q + r) % 8;
        const h = o.x + x[s].dx, y = o.y + x[s].dy;
        if (h >= 0 && h < A && y >= 0 && y < g && I[y * A + h] > 0) {
          D = !0;
          break;
        }
      }
      if (!D) return null;
    } else
      s = (t + 2) % 8;
    let a = null;
    for (let D = 0; D < 8; D++) {
      const r = (s + D) % 8, h = o.x + x[r].dx, y = o.y + x[r].dy;
      if (h >= 0 && h < A && y >= 0 && y < g && I[y * A + h] > 0) {
        a = { x: h, y }, t = (r + 4) % 8;
        break;
      }
    }
    if (!a) {
      E.length === 0 && E.push({ ...o }), console.warn(`Contour tracing stopped unexpectedly at (${o.x - 1}, ${o.y - 1}) for contour ${B}`);
      break;
    }
    const c = `${o.x},${o.y}`;
    if (i.has(c))
      return E;
    if (E.push({ ...o }), i.add(c), I[a.y * A + a.x] === 1 && (I[a.y * A + a.x] = B), o = a, o.x === C.x && o.y === C.y)
      break;
  }
  return e >= n ? (console.warn(`Contour tracing exceeded max steps for contour ${B}`), null) : E;
}
function gA(I) {
  if (I.length <= 2)
    return I;
  const A = [], g = I.length;
  for (let C = 0; C < g; C++) {
    const Q = I[(C + g - 1) % g], B = I[C], E = I[(C + 1) % g], i = B.x - Q.x, o = B.y - Q.y, t = E.x - B.x, e = E.y - B.y;
    i * e !== o * t && A.push(B);
  }
  if (A.length === 0 && g > 0) {
    if (g === 1) return [I[0]];
    if (g === 2) return I;
    let C = 0, Q = 1;
    const B = I[0];
    for (let E = 1; E < g; E++) {
      const i = I[E], o = (i.x - B.x) ** 2 + (i.y - B.y) ** 2;
      o > C && (C = o, Q = E);
    }
    return [I[0], I[Q]];
  }
  return A;
}
function BA(I) {
  let A = 0;
  const g = I.length;
  if (g < 3) return 0;
  for (let C = 0; C < g; C++) {
    const Q = (C + 1) % g;
    A += I[C].x * I[Q].y, A -= I[Q].x * I[C].y;
  }
  return Math.abs(A) / 2;
}
function QA(I) {
  if (I.length === 0)
    return { minX: 0, minY: 0, maxX: 0, maxY: 0 };
  let A = I[0].x, g = I[0].y, C = I[0].x, Q = I[0].y;
  for (let B = 1; B < I.length; B++) {
    const E = I[B];
    A = Math.min(A, E.x), g = Math.min(g, E.y), C = Math.max(C, E.x), Q = Math.max(Q, E.y);
  }
  return { minX: A, minY: g, maxX: C, maxY: Q };
}
function p(I, A = 1) {
  if (I.length <= 2)
    return I;
  let g = 0, C = 0;
  const Q = I[0], B = I[I.length - 1];
  for (let E = 1; E < I.length - 1; E++) {
    const i = CA(I[E], Q, B);
    i > g && (g = i, C = E);
  }
  if (g > A) {
    const E = p(I.slice(0, C + 1), A), i = p(I.slice(C), A);
    return E.slice(0, -1).concat(i);
  } else
    return [Q, B];
}
function CA(I, A, g) {
  const C = g.x - A.x, Q = g.y - A.y, B = C * C + Q * Q;
  if (B === 0)
    return Math.sqrt(
      Math.pow(I.x - A.x, 2) + Math.pow(I.y - A.y, 2)
    );
  const E = ((I.x - A.x) * C + (I.y - A.y) * Q) / B;
  let i, o;
  E < 0 ? (i = A.x, o = A.y) : E > 1 ? (i = g.x, o = g.y) : (i = A.x + E * C, o = A.y + E * Q);
  const t = I.x - i, e = I.y - o;
  return Math.sqrt(t * t + e * e);
}
function EA(I, A = 0.02) {
  const g = iA(I), C = A * g;
  return p(I, C);
}
function iA(I) {
  let A = 0;
  const g = I.length;
  if (g < 2) return 0;
  for (let C = 0; C < g; C++) {
    const Q = (C + 1) % g, B = I[C].x - I[Q].x, E = I[C].y - I[Q].y;
    A += Math.sqrt(B * B + E * E);
  }
  return A;
}
function tA(I) {
  let A = 0, g = 0;
  for (const C of I)
    A += C.x, g += C.y;
  return {
    x: A / I.length,
    y: g / I.length
  };
}
function oA(I, A = {}) {
  if (!I || !I.points || I.points.length < 4)
    return console.warn("Contour does not have enough points for corner detection"), null;
  const g = A.epsilon || 0.02, C = EA(I, g);
  let Q;
  return C && C.length === 4 ? Q = sA(C) : Q = eA(I.points), !Q || !Q.topLeft || !Q.topRight || !Q.bottomRight || !Q.bottomLeft ? (console.warn("Failed to find all four corners.", Q), null) : (console.log("Corner points:", Q), Q);
}
function eA(I) {
  if (!I || I.length === 0) return null;
  let A = I[0], g = I[0], C = I[0], Q = I[0], B = A.x + A.y, E = g.x - g.y, i = C.x + C.y, o = Q.x - Q.y;
  for (let t = 1; t < I.length; t++) {
    const e = I[t], n = e.x + e.y, s = e.x - e.y;
    n < B && (B = n, A = e), n > i && (i = n, C = e), s > E && (E = s, g = e), s < o && (o = s, Q = e);
  }
  return {
    topLeft: A,
    topRight: g,
    bottomRight: C,
    bottomLeft: Q
  };
}
function sA(I) {
  if (I.length !== 4)
    return console.warn(`Expected 4 points, got ${I.length}`), null;
  const A = tA(I), g = [...I].sort((E, i) => {
    const o = Math.atan2(E.y - A.y, E.x - A.x), t = Math.atan2(i.y - A.y, i.x - A.x);
    return o - t;
  });
  let C = 1 / 0, Q = 0;
  for (let E = 0; E < 4; E++) {
    const i = g[E].x + g[E].y;
    i < C && (C = i, Q = E);
  }
  const B = [
    g[Q],
    g[(Q + 1) % 4],
    g[(Q + 2) % 4],
    g[(Q + 3) % 4]
  ];
  return {
    topLeft: B[0],
    topRight: B[1],
    bottomRight: B[2],
    bottomLeft: B[3]
  };
}
let N, U = null;
function X() {
  return (U === null || U.byteLength === 0) && (U = new Uint8Array(N.memory.buffer)), U;
}
let L = 0;
function j(I, A) {
  const g = A(I.length * 1, 1) >>> 0;
  return X().set(I, g / 1), L = I.length, g;
}
function v(I, A) {
  return I = I >>> 0, X().subarray(I / 1, I / 1 + A);
}
function aA(I, A, g, C) {
  const Q = j(I, N.__wbindgen_malloc), B = L, E = N.dilate(Q, B, A, g, C);
  var i = v(E[0], E[1]).slice();
  return N.__wbindgen_free(E[0], E[1] * 1, 1), i;
}
let H = null;
function O() {
  return (H === null || H.byteLength === 0) && (H = new Float32Array(N.memory.buffer)), H;
}
function nA(I, A) {
  const g = A(I.length * 4, 4) >>> 0;
  return O().set(I, g / 4), L = I.length, g;
}
function DA(I, A, g, C, Q) {
  const B = nA(I, N.__wbindgen_malloc), E = L, i = N.hysteresis_thresholding(B, E, A, g, C, Q);
  var o = v(i[0], i[1]).slice();
  return N.__wbindgen_free(i[0], i[1] * 1, 1), o;
}
function cA(I, A, g, C, Q) {
  const B = j(I, N.__wbindgen_malloc), E = L, i = N.blur(B, E, A, g, C, Q);
  var o = v(i[0], i[1]).slice();
  return N.__wbindgen_free(i[0], i[1] * 1, 1), o;
}
let b = null;
function hA() {
  return (b === null || b.byteLength === 0) && (b = new Uint16Array(N.memory.buffer)), b;
}
function P(I, A) {
  const g = A(I.length * 2, 2) >>> 0;
  return hA().set(I, g / 2), L = I.length, g;
}
function rA(I, A) {
  return I = I >>> 0, O().subarray(I / 4, I / 4 + A);
}
function yA(I, A, g, C, Q) {
  const B = P(I, N.__wbindgen_malloc), E = L, i = P(A, N.__wbindgen_malloc), o = L, t = N.non_maximum_suppression(B, E, i, o, g, C, Q);
  var e = rA(t[0], t[1]).slice();
  return N.__wbindgen_free(t[0], t[1] * 4, 4), e;
}
async function wA(I, A) {
  if (typeof Response == "function" && I instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(I, A);
      } catch (C) {
        if (I.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", C);
        else
          throw C;
      }
    const g = await I.arrayBuffer();
    return await WebAssembly.instantiate(g, A);
  } else {
    const g = await WebAssembly.instantiate(I, A);
    return g instanceof WebAssembly.Instance ? { instance: g, module: I } : g;
  }
}
function NA() {
  const I = {};
  return I.wbg = {}, I.wbg.__wbindgen_init_externref_table = function() {
    const A = N.__wbindgen_export_0, g = A.grow(4);
    A.set(0, void 0), A.set(g + 0, void 0), A.set(g + 1, null), A.set(g + 2, !0), A.set(g + 3, !1);
  }, I;
}
function lA(I, A) {
  return N = I.exports, z.__wbindgen_wasm_module = A, H = null, b = null, U = null, N.__wbindgen_start(), N;
}
async function z(I) {
  if (N !== void 0) return N;
  typeof I < "u" && (Object.getPrototypeOf(I) === Object.prototype ? { module_or_path: I } = I : console.warn("using deprecated parameters for the initialization function; pass a single object instead")), typeof I > "u" && (I = new URL("data:application/wasm;base64,", import.meta.url));
  const A = NA();
  (typeof I == "string" || typeof Request == "function" && I instanceof Request || typeof URL == "function" && I instanceof URL) && (I = fetch(I));
  const { instance: g, module: C } = await wA(await I, A);
  return lA(g, C);
}
const q = z();
function FA(I) {
  const { width: A, height: g, data: C } = I, Q = new Uint8ClampedArray(A * g);
  for (let B = 0, E = 0; B < C.length; B += 4, E++)
    Q[E] = C[B] * 54 + C[B + 1] * 183 + C[B + 2] * 19 >> 8;
  return Q;
}
function RA(I, A, g, C = 5, Q = 0) {
  Q === 0 && (Q = 0.3 * ((C - 1) * 0.5 - 1) + 0.8);
  const B = Math.floor(C / 2), E = GA(C, Q), i = new Uint8ClampedArray(A * g), o = new Uint8ClampedArray(A * g);
  for (let t = 0; t < g; t++) {
    const e = t * A;
    for (let n = 0; n < A; n++) {
      let s = 0;
      for (let a = -B; a <= B; a++) {
        const c = Math.min(A - 1, Math.max(0, n + a));
        s += I[e + c] * E[B + a];
      }
      i[e + n] = s;
    }
  }
  for (let t = 0; t < A; t++)
    for (let e = 0; e < g; e++) {
      let n = 0;
      for (let s = -B; s <= B; s++) {
        const a = Math.min(g - 1, Math.max(0, e + s));
        n += i[a * A + t] * E[B + s];
      }
      o[e * A + t] = Math.round(n);
    }
  return o;
}
function GA(I, A) {
  const g = new Float32Array(I), C = Math.floor(I / 2);
  let Q = 0;
  for (let B = 0; B < I; B++) {
    const E = B - C;
    g[B] = Math.exp(-(E * E) / (2 * A * A)), Q += g[B];
  }
  for (let B = 0; B < I; B++)
    g[B] /= Q;
  return g;
}
function dA(I, A, g) {
  const C = new Int16Array(A * g), Q = new Int16Array(A * g);
  for (let B = 1; B < g - 1; B++) {
    const E = B * A, i = (B - 1) * A, o = (B + 1) * A;
    for (let t = 1; t < A - 1; t++) {
      const e = E + t, n = I[i + t - 1], s = I[i + t], a = I[i + t + 1], c = I[E + t - 1], D = I[E + t + 1], r = I[o + t - 1], h = I[o + t], y = I[o + t + 1], w = a - n + 2 * (D - c) + (y - r), l = r + 2 * h + y - (n + 2 * s + a);
      C[e] = w, Q[e] = l;
    }
  }
  return { dx: C, dy: Q };
}
function kA(I, A, g, C, Q) {
  const B = new Float32Array(g * C), E = new Float32Array(g * C);
  for (let i = 0; i < I.length; i++) {
    const o = I[i], t = A[i];
    Q ? B[i] = Math.sqrt(o * o + t * t) : B[i] = Math.abs(o) + Math.abs(t);
  }
  for (let i = 1; i < C - 1; i++)
    for (let o = 1; o < g - 1; o++) {
      const t = i * g + o, e = B[t];
      if (e === 0) {
        E[t] = 0;
        continue;
      }
      const n = I[t], s = A[t];
      let a = 0, c = 0;
      const D = Math.abs(n), r = Math.abs(s);
      if (r > D * 2.4142)
        a = B[t - g], c = B[t + g];
      else if (D > r * 2.4142)
        a = B[t - 1], c = B[t + 1];
      else {
        const h = (n ^ s) < 0 ? -1 : 1;
        s > 0 ? (a = B[(i - 1) * g + (o - h)], c = B[(i + 1) * g + (o + h)]) : (a = B[(i + 1) * g + (o - h)], c = B[(i - 1) * g + (o + h)]), n > 0 && s > 0 || n < 0 && s < 0 ? (a = B[(i - 1) * g + (o + 1)], c = B[(i + 1) * g + (o - 1)]) : (a = B[(i - 1) * g + (o - 1)], c = B[(i + 1) * g + (o + 1)]);
      }
      e >= a && e >= c ? E[t] = e : E[t] = 0;
    }
  return E;
}
function Z(I, A, g, C, Q) {
  const B = new Uint8Array(A * g), E = [];
  for (let t = 1; t < g - 1; t++)
    for (let e = 1; e < A - 1; e++) {
      const n = t * A + e, s = I[n];
      s >= Q ? (B[n] = 2, E.push({ x: e, y: t })) : s >= C ? B[n] = 0 : B[n] = 1;
    }
  for (let t = 0; t < A; t++)
    B[t] = 1, B[(g - 1) * A + t] = 1;
  for (let t = 1; t < g - 1; t++)
    B[t * A] = 1, B[t * A + A - 1] = 1;
  const i = [-1, 0, 1, -1, 1, -1, 0, 1], o = [-1, -1, -1, 0, 0, 1, 1, 1];
  for (; E.length > 0; ) {
    const { x: t, y: e } = E.pop();
    for (let n = 0; n < 8; n++) {
      const s = t + i[n], a = e + o[n], c = a * A + s;
      B[c] === 0 && (B[c] = 2, E.push({ x: s, y: a }));
    }
  }
  return B;
}
function SA(I, A, g, C = 5) {
  const Q = Math.floor(C / 2), B = new Uint8ClampedArray(A * g), E = new Uint8ClampedArray(A * g);
  for (let i = 0; i < g; i++) {
    const o = i * A;
    for (let t = 0; t < A; t++) {
      let e = 0;
      for (let n = -Q; n <= Q; n++) {
        const s = t + n;
        if (s >= 0 && s < A) {
          const a = I[o + s];
          a > e && (e = a);
        }
      }
      B[o + t] = e;
    }
  }
  for (let i = 0; i < A; i++)
    for (let o = 0; o < g; o++) {
      let t = 0;
      for (let e = -Q; e <= Q; e++) {
        const n = o + e;
        if (n >= 0 && n < g) {
          const s = B[n * A + i];
          s > t && (t = s);
        }
      }
      E[o * A + i] = t;
    }
  return E;
}
async function fA(I, A = {}) {
  const g = [], C = performance.now(), { width: Q, height: B } = I;
  let E = A.lowThreshold !== void 0 ? A.lowThreshold : 75, i = A.highThreshold !== void 0 ? A.highThreshold : 200;
  const o = A.kernelSize || 5, t = A.sigma || 0, e = A.L2gradient === void 0 ? !1 : A.L2gradient, n = A.applyDilation !== void 0 ? A.applyDilation : !0, s = A.dilationKernelSize || 5, a = A.useWasmHysteresis !== void 0 ? A.useWasmHysteresis : !1;
  E >= i && (console.warn(`Canny Edge Detector: lowThreshold (${E}) should be lower than highThreshold (${i}). Swapping them.`), [E, i] = [i, E]);
  let c = performance.now();
  const D = FA(I);
  let r = performance.now();
  g.push({ step: "Grayscale", ms: (r - c).toFixed(2) }), A.debug && (A.debug.grayscale = D);
  let h;
  c = performance.now();
  try {
    await q, h = cA(D, Q, B, o, t);
  } catch {
    h = RA(D, Q, B, o, t);
  }
  r = performance.now(), g.push({ step: "Gaussian Blur", ms: (r - c).toFixed(2) }), A.debug && (A.debug.blurred = h), c = performance.now();
  let y, w;
  {
    const F = dA(h, Q, B);
    y = F.dx, w = F.dy;
  }
  r = performance.now(), g.push({ step: "Gradients", ms: (r - c).toFixed(2) }), c = performance.now();
  let l;
  try {
    await q, l = await yA(y, w, Q, B, e);
  } catch {
    l = kA(y, w, Q, B, e);
  }
  r = performance.now(), g.push({ step: "Non-Max Suppression", ms: (r - c).toFixed(2) }), c = performance.now();
  const G = e ? E * E : E, d = e ? i * i : i;
  let k;
  if (a)
    try {
      await q, k = DA(l, Q, B, G, d);
    } catch (F) {
      console.warn("WASM hysteresis failed, falling back to JS:", F), k = Z(l, Q, B, G, d);
    }
  else
    k = Z(l, Q, B, G, d);
  r = performance.now(), g.push({ step: "Hysteresis", ms: (r - c).toFixed(2) }), c = performance.now();
  const R = new Uint8ClampedArray(Q * B);
  for (let F = 0; F < k.length; F++)
    R[F] = k[F] === 2 ? 255 : 0;
  r = performance.now(), g.push({ step: "Binary Image", ms: (r - c).toFixed(2) }), c = performance.now();
  let f = R;
  if (n)
    try {
      await q, f = aA(R, Q, B, s);
    } catch {
      f = SA(R, Q, B, s);
    }
  if (r = performance.now(), g.push({ step: "Dilation", ms: (r - c).toFixed(2) }), A.debug) {
    A.debug.dx = y, A.debug.dy = w;
    const F = new Float32Array(Q * B);
    for (let J = 0; J < y.length; J++) {
      const Y = y[J], S = w[J];
      F[J] = e ? Math.sqrt(Y * Y + S * S) : Math.abs(Y) + Math.abs(S);
    }
    A.debug.magnitude = F, A.debug.suppressed = l, A.debug.edgeMap = k, A.debug.cannyEdges = R, A.debug.finalEdges = f, A.debug.timings = g;
  }
  const m = performance.now();
  return g.unshift({ step: "Total", ms: (m - C).toFixed(2) }), console.table(g), f;
}
class JA {
  constructor(A = {}) {
    this.options = {
      targetFPS: A.targetFPS || 10,
      // Limit FPS for performance
      detectionInterval: A.detectionInterval || 150,
      // ms between detections
      confidenceThreshold: A.confidenceThreshold || 0.7,
      stabilizationFrames: A.stabilizationFrames || 3,
      maxProcessingDimension: A.maxProcessingDimension || 500,
      // Lower for live processing
      ...A
    }, this.isRunning = !1, this.stream = null, this.video = null, this.canvas = null, this.ctx = null, this.outputCanvas = null, this.outputCtx = null, this.lastDetectionTime = 0, this.frameCount = 0, this.detectionCount = 0, this.lastFPSUpdate = 0, this.currentFPS = 0, this.lastResult = null, this.stableResults = [], this.currentCorners = null, this.onDetection = null, this.onFPSUpdate = null, this.onError = null;
  }
  /**
   * Initialize webcam access and start live scanning
   * @param {HTMLElement} outputElement - Canvas element to render results to
   * @param {Object} constraints - MediaStream constraints
   */
  async init(A, g = {}) {
    try {
      this.outputCanvas = A, this.outputCtx = this.outputCanvas.getContext("2d"), this.video = document.createElement("video"), this.video.style.display = "none", this.video.autoplay = !0, this.video.muted = !0, this.video.playsInline = !0, document.body.appendChild(this.video), this.canvas = document.createElement("canvas"), this.ctx = this.canvas.getContext("2d");
      const Q = { ...{
        video: {
          width: { ideal: 1280, max: 1920 },
          height: { ideal: 720, max: 1080 },
          facingMode: "environment"
          // Use back camera on mobile
        },
        audio: !1
      }, ...g };
      this.stream = await navigator.mediaDevices.getUserMedia(Q), this.video.srcObject = this.stream, await new Promise((B) => {
        this.video.addEventListener("loadedmetadata", B, { once: !0 });
      }), this.canvas.width = this.video.videoWidth, this.canvas.height = this.video.videoHeight, this.outputCanvas.width = this.video.videoWidth, this.outputCanvas.height = this.video.videoHeight, console.log(`Live scanner initialized: ${this.video.videoWidth}x${this.video.videoHeight}`);
    } catch (C) {
      throw console.error("Failed to initialize live scanner:", C), this.onError && this.onError(C), C;
    }
  }
  /**
   * Start the live scanning loop
   */
  start() {
    if (this.isRunning || !this.video) {
      console.warn("Scanner already running or not initialized");
      return;
    }
    this.isRunning = !0, this.lastDetectionTime = Date.now(), this.lastFPSUpdate = Date.now(), this.frameCount = 0, this.detectionCount = 0, console.log("Live scanner started"), this.processFrame();
  }
  /**
   * Stop the live scanning
   */
  stop() {
    this.isRunning = !1, this.stream && (this.stream.getTracks().forEach((A) => A.stop()), this.stream = null), this.video && (this.video.remove(), this.video = null), console.log("Live scanner stopped");
  }
  /**
   * Main processing loop - optimized for performance
   */
  async processFrame() {
    if (!this.isRunning) return;
    const A = Date.now();
    this.frameCount++;
    try {
      this.outputCtx.drawImage(this.video, 0, 0, this.outputCanvas.width, this.outputCanvas.height);
      const g = A - this.lastDetectionTime;
      if (g >= this.options.detectionInterval) {
        this.lastDetectionTime = A, this.detectionCount++, this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
        const C = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        this.detectDocumentAsync(C).catch((Q) => {
          console.error("Detection error:", Q), this.onError && this.onError(Q);
        });
      }
      this.currentCorners && this.drawDocumentOverlay(this.currentCorners), A - this.lastFPSUpdate >= 1e3 && (this.currentFPS = Math.round(this.frameCount * 1e3 / (A - this.lastFPSUpdate)), this.frameCount = 0, this.lastFPSUpdate = A, this.onFPSUpdate && this.onFPSUpdate({
        renderFPS: this.currentFPS,
        detectionFPS: Math.round(this.detectionCount * 1e3 / 1e3),
        lastDetectionTime: g
      }), this.detectionCount = 0);
    } catch (g) {
      console.error("Frame processing error:", g), this.onError && this.onError(g);
    }
    requestAnimationFrame(() => this.processFrame());
  }
  /**
   * Run document detection asynchronously
   */
  async detectDocumentAsync(A) {
    try {
      const g = await W(A, {
        ...this.options,
        debug: !1
        // Disable debug for performance
      });
      g.success && g.corners ? (this.updateStableCorners(g.corners), this.onDetection && this.onDetection({
        corners: g.corners,
        confidence: this.calculateConfidence(g),
        isStable: this.stableResults.length >= this.options.stabilizationFrames
      })) : this.stableResults.length > 0 && (this.stableResults.pop(), this.stableResults.length === 0 && (this.currentCorners = null));
    } catch (g) {
      throw console.error("Document detection failed:", g), g;
    }
  }
  /**
   * Update stable corner detection with smoothing
   */
  updateStableCorners(A) {
    this.stableResults.push(A), this.stableResults.length > this.options.stabilizationFrames && this.stableResults.shift(), this.stableResults.length >= this.options.stabilizationFrames && (this.currentCorners = this.averageCorners(this.stableResults));
  }
  /**
   * Calculate average corners from multiple detections for smoothing
   */
  averageCorners(A) {
    const g = {
      topLeft: { x: 0, y: 0 },
      topRight: { x: 0, y: 0 },
      bottomRight: { x: 0, y: 0 },
      bottomLeft: { x: 0, y: 0 }
    };
    A.forEach((Q) => {
      Object.keys(g).forEach((B) => {
        g[B].x += Q[B].x, g[B].y += Q[B].y;
      });
    });
    const C = A.length;
    return Object.keys(g).forEach((Q) => {
      g[Q].x = Math.round(g[Q].x / C), g[Q].y = Math.round(g[Q].y / C);
    }), g;
  }
  /**
   * Draw document overlay on output canvas
   */
  drawDocumentOverlay(A, g = null, C = 1, Q = 1) {
    const B = g || this.outputCtx;
    B.save();
    const E = {
      topLeft: { x: A.topLeft.x * C, y: A.topLeft.y * Q },
      topRight: { x: A.topRight.x * C, y: A.topRight.y * Q },
      bottomRight: { x: A.bottomRight.x * C, y: A.bottomRight.y * Q },
      bottomLeft: { x: A.bottomLeft.x * C, y: A.bottomLeft.y * Q }
    };
    B.strokeStyle = "#00FF00", B.lineWidth = 3, B.setLineDash([5, 5]), B.beginPath(), B.moveTo(E.topLeft.x, E.topLeft.y), B.lineTo(E.topRight.x, E.topRight.y), B.lineTo(E.bottomRight.x, E.bottomRight.y), B.lineTo(E.bottomLeft.x, E.bottomLeft.y), B.closePath(), B.stroke(), B.fillStyle = "#00FF00", B.setLineDash([]);
    const i = 8 * Math.max(C, Q);
    Object.values(E).forEach((o) => {
      B.beginPath(), B.arc(o.x, o.y, i, 0, 2 * Math.PI), B.fill();
    }), B.restore();
  }
  /**
   * Calculate detection confidence (placeholder - can be enhanced)
   */
  calculateConfidence(A) {
    return 0.8;
  }
  /**
   * Capture current frame as document with perspective transform
   */
  async captureDocument() {
    if (!this.currentCorners || !this.video)
      throw new Error("No stable document detected");
    const { extractDocument: A } = await Promise.resolve().then(() => xA), g = document.createElement("canvas");
    g.width = this.video.videoWidth, g.height = this.video.videoHeight, g.getContext("2d").drawImage(this.video, 0, 0);
    const Q = this.video.videoWidth / this.outputCanvas.width, B = this.video.videoHeight / this.outputCanvas.height, E = {
      topLeft: {
        x: this.currentCorners.topLeft.x * Q,
        y: this.currentCorners.topLeft.y * B
      },
      topRight: {
        x: this.currentCorners.topRight.x * Q,
        y: this.currentCorners.topRight.y * B
      },
      bottomRight: {
        x: this.currentCorners.bottomRight.x * Q,
        y: this.currentCorners.bottomRight.y * B
      },
      bottomLeft: {
        x: this.currentCorners.bottomLeft.x * Q,
        y: this.currentCorners.bottomLeft.y * B
      }
    };
    return A(g, E);
  }
  /**
   * Get current scanner statistics
   */
  getStats() {
    return {
      isRunning: this.isRunning,
      currentFPS: this.currentFPS,
      videoResolution: this.video ? `${this.video.videoWidth}x${this.video.videoHeight}` : null,
      hasStableDetection: this.currentCorners !== null,
      stabilizationProgress: `${this.stableResults.length}/${this.options.stabilizationFrames}`
    };
  }
}
async function MA() {
  try {
    const A = (await navigator.mediaDevices.enumerateDevices()).filter((g) => g.kind === "videoinput");
    return {
      available: A.length > 0,
      deviceCount: A.length,
      devices: A
    };
  } catch (I) {
    return console.error("Error checking webcam availability:", I), { available: !1, error: I.message };
  }
}
function LA(I, A = 800) {
  const { width: g, height: C } = I, Q = Math.max(g, C);
  if (Q <= A)
    return {
      scaledImageData: I,
      scaleFactor: 1,
      originalDimensions: { width: g, height: C },
      scaledDimensions: { width: g, height: C }
    };
  const B = A / Q, E = Math.round(g * B), i = Math.round(C * B);
  console.log(`Smart downscale: ${g}x${C} -> ${E}x${i} (factor: ${B.toFixed(3)})`);
  const o = document.createElement("canvas");
  o.width = g, o.height = C, o.getContext("2d").putImageData(I, 0, 0);
  const e = document.createElement("canvas");
  e.width = E, e.height = i;
  const n = e.getContext("2d");
  return n.imageSmoothingEnabled = !0, n.imageSmoothingQuality = "high", n.drawImage(o, 0, 0, g, C, 0, 0, E, i), {
    scaledImageData: n.getImageData(0, 0, E, i),
    scaleFactor: 1 / B,
    // Return inverse for compatibility with existing code
    originalDimensions: { width: g, height: C },
    scaledDimensions: { width: E, height: i }
  };
}
const mA = function(I, A) {
  const g = I.width || I.naturalWidth, C = I.height || I.naturalHeight, Q = document.createElement("canvas");
  Q.width = g, Q.height = C;
  const B = Q.getContext("2d");
  return B.drawImage(I, 0, 0, g, C), uA(B, I, A), Q;
};
async function W(I, A = {}) {
  const g = A.debug ? {} : null, C = A.maxProcessingDimension || 800, { scaledImageData: Q, scaleFactor: B, originalDimensions: E, scaledDimensions: i } = LA(I, C);
  g && (g.preprocessing = {
    originalDimensions: E,
    scaledDimensions: i,
    scaleFactor: B,
    maxProcessingDimension: C
  });
  const { width: o, height: t } = Q, e = await fA(Q, {
    lowThreshold: A.lowThreshold || 75,
    // Match OpenCV values
    highThreshold: A.highThreshold || 200,
    // Match OpenCV values
    dilationKernelSize: A.dilationKernelSize || 3,
    // Match OpenCV value 
    dilationIterations: A.dilationIterations || 1,
    debug: g
  }), n = AA(e, {
    minArea: (A.minArea || 1e3) / (B * B),
    // Adjust minArea for scaled image
    debug: g,
    width: o,
    height: t
  });
  if (!n || n.length === 0)
    return console.log("No document detected"), {
      success: !1,
      message: "No document detected",
      debug: g
    };
  const s = n[0], a = oA(s, {
    epsilon: A.epsilon
    // Pass epsilon for approximation
  });
  let c = a;
  return B !== 1 && (c = {
    topLeft: { x: a.topLeft.x * B, y: a.topLeft.y * B },
    topRight: { x: a.topRight.x * B, y: a.topRight.y * B },
    bottomRight: { x: a.bottomRight.x * B, y: a.bottomRight.y * B },
    bottomLeft: { x: a.bottomLeft.x * B, y: a.bottomLeft.y * B }
  }), {
    success: !0,
    contour: s,
    corners: c,
    debug: g
  };
}
function YA(I, A) {
  function g(o) {
    const t = [];
    for (let e = 0; e < 4; e++) {
      const [n, s] = o[e];
      t.push([n, s, 1, 0, 0, 0, -n * A[e][0], -s * A[e][0]]), t.push([0, 0, 0, n, s, 1, -n * A[e][1], -s * A[e][1]]);
    }
    return t;
  }
  const C = g(I), Q = [
    A[0][0],
    A[0][1],
    A[1][0],
    A[1][1],
    A[2][0],
    A[2][1],
    A[3][0],
    A[3][1]
  ];
  function B(o, t) {
    const e = o.length, n = o[0].length, s = o.map((D) => D.slice()), a = t.slice();
    for (let D = 0; D < n; D++) {
      let r = D;
      for (let h = D + 1; h < e; h++)
        Math.abs(s[h][D]) > Math.abs(s[r][D]) && (r = h);
      Math.abs(s[r][D]) < 1e-12 && console.warn("Matrix is nearly singular, perspective transform may be inaccurate"), [s[D], s[r]] = [s[r], s[D]], [a[D], a[r]] = [a[r], a[D]];
      for (let h = D + 1; h < e; h++) {
        if (Math.abs(s[D][D]) < 1e-12) continue;
        const y = s[h][D] / s[D][D];
        for (let w = D; w < n; w++)
          s[h][w] -= y * s[D][w];
        a[h] -= y * a[D];
      }
    }
    const c = new Array(n);
    for (let D = n - 1; D >= 0; D--) {
      let r = a[D];
      for (let h = D + 1; h < n; h++)
        r -= s[D][h] * c[h];
      Math.abs(s[D][D]) < 1e-12 ? (console.warn("Singular matrix encountered during back substitution"), c[D] = 0) : c[D] = r / s[D][D];
    }
    return c;
  }
  const E = B(C, Q);
  return [
    [E[0], E[1], E[2]],
    [E[3], E[4], E[5]],
    [E[6], E[7], 1]
  ];
}
function uA(I, A, g) {
  const { topLeft: C, topRight: Q, bottomRight: B, bottomLeft: E } = g, i = Math.sqrt(Math.pow(Q.x - C.x, 2) + Math.pow(Q.y - C.y, 2)), o = Math.sqrt(Math.pow(B.x - E.x, 2) + Math.pow(B.y - E.y, 2)), t = Math.sqrt(Math.pow(E.x - C.x, 2) + Math.pow(E.y - C.y, 2)), e = Math.sqrt(Math.pow(B.x - Q.x, 2) + Math.pow(B.y - Q.y, 2)), n = Math.max(i, o), s = Math.max(t, e);
  I.canvas.width = Math.round(n), I.canvas.height = Math.round(s);
  const a = [
    [C.x, C.y],
    [Q.x, Q.y],
    [B.x, B.y],
    [E.x, E.y]
  ], D = YA(a, [
    [0, 0],
    [n, 0],
    [n, s],
    [0, s]
  ]);
  console.log("Perspective Matrix:", D), UA(I, A, D, n, s);
}
function UA(I, A, g, C, Q) {
  const B = document.createElement("canvas");
  B.width = A.width || A.naturalWidth, B.height = A.height || A.naturalHeight;
  const E = B.getContext("2d");
  E.drawImage(A, 0, 0, B.width, B.height);
  const o = E.getImageData(0, 0, B.width, B.height).data, t = B.width, e = B.height, n = I.createImageData(C, Q), s = n.data;
  console.log(`Transforming from ${t}x${e} to ${C}x${Q}`);
  for (let a = 0; a < Q; a++)
    for (let c = 0; c < C; c++) {
      const D = g[2][0] * c + g[2][1] * a + g[2][2];
      if (Math.abs(D) < 1e-10) continue;
      let r = (g[0][0] * c + g[0][1] * a + g[0][2]) / D, h = (g[1][0] * c + g[1][1] * a + g[1][2]) / D;
      if (r >= 0 && r < t - 1 && h >= 0 && h < e - 1) {
        const y = Math.floor(r), w = Math.floor(h), l = y + 1, G = w + 1, d = r - y, k = h - w, R = (S, u) => {
          const M = (u * t + S) * 4;
          return [
            o[M],
            // R
            o[M + 1],
            // G
            o[M + 2],
            // B
            o[M + 3]
            // A
          ];
        }, f = R(y, w), m = R(l, w), F = R(y, G), J = R(l, G), Y = (a * C + c) * 4;
        for (let S = 0; S < 4; S++) {
          const u = f[S] * (1 - d) + m[S] * d, M = F[S] * (1 - d) + J[S] * d, V = u * (1 - k) + M * k;
          s[Y + S] = Math.round(V);
        }
      } else {
        const y = (a * C + c) * 4;
        s[y] = 0, s[y + 1] = 0, s[y + 2] = 0, s[y + 3] = 0;
      }
    }
  I.putImageData(n, 0, 0);
}
async function HA(I, A = {}) {
  const g = document.createElement("canvas"), C = g.getContext("2d");
  g.width = I.width || I.naturalWidth, g.height = I.height || I.naturalHeight, console.log(`Canvas size: ${g.width}x${g.height}`), C.drawImage(I, 0, 0, g.width, g.height);
  const Q = C.getImageData(0, 0, g.width, g.height), B = await W(Q, A);
  return B.success && B.corners && bA(C, B.corners, g.width, g.height, {
    cornerRadius: A.cornerRadius || 15,
    cornerLineLength: A.cornerLineLength || 25,
    cornerLineWidth: A.cornerLineWidth || 4,
    borderWidth: A.borderWidth || 2,
    cornerColor: A.cornerColor || "#FFFFFF",
    borderColor: A.borderColor || "#4A90E2",
    darkenOpacity: A.darkenOpacity || 0.4
  }), A.debug && (g.debugInfo = B.debug), g;
}
function bA(I, A, g, C, Q = {}) {
  const { topLeft: B, topRight: E, bottomRight: i, bottomLeft: o } = A;
  Q.cornerRadius;
  const t = Q.cornerLineLength || 25, e = Q.cornerLineWidth || 4, n = Q.borderWidth || 2, s = Q.cornerColor || "#FFFFFF", a = Q.borderColor || "#4A90E2", c = Q.darkenOpacity || 0.4;
  I.save(), I.beginPath(), I.rect(0, 0, g, C), I.moveTo(B.x, B.y), I.lineTo(E.x, E.y), I.lineTo(i.x, i.y), I.lineTo(o.x, o.y), I.closePath(), I.fillStyle = `rgba(0, 0, 0, ${c})`, I.fill("evenodd"), I.beginPath(), I.moveTo(B.x, B.y), I.lineTo(E.x, E.y), I.lineTo(i.x, i.y), I.lineTo(o.x, o.y), I.closePath(), I.strokeStyle = a, I.lineWidth = n, I.stroke(), I.strokeStyle = s, I.lineWidth = e, I.lineCap = "round", I.lineJoin = "round", I.miterLimit = 10;
  function D(r, h, y) {
    const w = r.x, l = r.y, G = h.x - w, d = h.y - l, k = Math.sqrt(G * G + d * d), R = { x: G / k, y: d / k }, f = y.x - w, m = y.y - l, F = Math.sqrt(f * f + m * m), J = { x: f / F, y: m / F }, Y = w + R.x * t, S = l + R.y * t, u = w + J.x * t, M = l + J.y * t;
    I.beginPath(), I.moveTo(Y, S), I.lineTo(w, l), I.lineTo(u, M), I.stroke();
  }
  D(B, E, o), D(E, B, i), D(i, E, o), D(o, B, i), I.restore();
}
const xA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  LiveScanner: JA,
  checkWebcamAvailability: MA,
  detectDocument: W,
  extractDocument: mA,
  highlightDocument: HA
}, Symbol.toStringTag, { value: "Module" }));
export {
  JA as LiveScanner,
  MA as checkWebcamAvailability,
  W as detectDocument,
  mA as extractDocument,
  HA as highlightDocument
};
//# sourceMappingURL=scanic.js.map
